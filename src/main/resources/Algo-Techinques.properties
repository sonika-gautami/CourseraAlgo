###
# Steps to developing a usable algorithm.
1 = Model the problem.
2 = Find an algorithm to solve it.\
    ?Fast enough? \
    ?Fits in memory?
3 = If not, figure out why.
4 = Find a way to address the problem. \
    ?Iterate until satisfied.

###
# Notes: Algo-Timing
11 = String Concat on Java = N time Cost for Running Algo = o(n)
12 = Possible Times: \
        Constant \
        logN    [ Input Divided into Two ] \
        N       [ Loop of N ] \
        N logN  [ Divide & Conquer ] \
        N^2     [ Twice Loop ] \
        N^3     [ Thrice Loop ] \
        2^N     [ Exhaustive Search(check all subsets) ]
13 = Notations: \
        (Big) Theta : asymptotic order of growth \
        (Big) Oh    : upper bound (max time taken) \
        (Big) Omega : lower bound (min time taken) \
        (~) Tilde   : approximate model

###
# Notes: Algo-Memory
21 = Prmitives: \
        boolean 1 \
        byte    1 \
        char    2 \
        int     4 \
        float   4 \
        long    8 \
        double  8
22 = Pointers Size = 8 Bytes (64 bits)
23 = Array of N-Size =  M * N  + 24 (Additional of Array) \
                            M = DataType required bytes \
                            N = array size
24 = Object Size : \
        each fields' own bytes if primitive + \
        each fields' own bytes if object + \
                object reference cost of 8 bytes \
        16 bytes (object overhead) + \
        Padding Each object uses a multiple of 8 bytes. (4/8/..)



Correct

Hint: given an integer x\mathtt{x}x and a sorted array a[]\mathtt{a[ ]}a[] of nnn distinct integers, design a linear-time algorithm to determine if there exists two distinct indices i\mathtt{i}i and j\mathtt{j}j such that a[i]+a[j]==x\mathtt{a[i] + a[j] == x}a[i]+a[j]==x.

Hints: Standard version. First, find the maximum integer using ?1lg?n\sim 1 \lg n?1lgn compares?this divides the array into the increasing and decreasing pieces.

Signing bonus. Do it without finding the maximum integer.

Hints:

Version 0: sequential search.

Version 1: binary search.

Version 2: find an interval containing TTT of size ?2T\le 2T?2T, then do binary search.

Version 3: find an interval of size n\sqrt nn

?, then do sequential search. Note: can be improved to ?2n\sim \sqrt{2n}?2n

? tosses.

Version 4:  1+2+3+?+t?????12t21 + 2 + 3 + \ldots + t \; \sim \; \frac{1}{2} t^21+2+3+?+t?21?t2. Aim for c=22c = 2 \sqrt{2}c=22
?.

